// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherForecast.Infrastructure.Database;

#nullable disable

namespace WeatherForecast.Infrastructure.Database.Migrations
{
    [DbContext(typeof(WeatherForecastContext))]
    partial class WeatherForecastContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherForecast.Domain.Entities.SearchHistoryItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("SearchedAt")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.ToTable("SearchHistory", (string)null);
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.WeatherForecastData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Humidity")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("Temperature")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTimeOffset>("Time")
                        .HasColumnType("datetimeoffset");

                    b.Property<decimal>("WindSpeed")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("Id");

                    b.ToTable("WeatherForecasts", (string)null);
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.SearchHistoryItem", b =>
                {
                    b.OwnsOne("WeatherForecast.Domain.Models.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("SearchHistoryItemId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Latitude")
                                .HasPrecision(10, 7)
                                .HasColumnType("decimal(10,7)")
                                .HasColumnName("Latitude");

                            b1.Property<decimal>("Longitude")
                                .HasPrecision(10, 7)
                                .HasColumnType("decimal(10,7)")
                                .HasColumnName("Longitude");

                            b1.HasKey("SearchHistoryItemId");

                            b1.HasIndex("Longitude", "Latitude")
                                .IsUnique();

                            b1.ToTable("SearchHistory");

                            b1.WithOwner()
                                .HasForeignKey("SearchHistoryItemId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("WeatherForecast.Domain.Entities.WeatherForecastData", b =>
                {
                    b.OwnsOne("WeatherForecast.Domain.Models.Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("WeatherForecastDataId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Latitude")
                                .HasPrecision(10, 7)
                                .HasColumnType("decimal(10,7)")
                                .HasColumnName("Latitude");

                            b1.Property<decimal>("Longitude")
                                .HasPrecision(10, 7)
                                .HasColumnType("decimal(10,7)")
                                .HasColumnName("Longitude");

                            b1.HasKey("WeatherForecastDataId");

                            b1.HasIndex("Longitude", "Latitude")
                                .IsUnique();

                            b1.ToTable("WeatherForecasts");

                            b1.WithOwner()
                                .HasForeignKey("WeatherForecastDataId");
                        });

                    b.Navigation("Location")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
